@page "/measurements"
@rendermode InteractiveServer

@using System.Security.Claims
@using Kalorhytm.Contracts.Models
@using Kalorhytm.Domain.Enums
@using Kalorhytm.Logic.Interfaces
@using Kalorhytm.Logic.Interfaces.IBodyMeasurementGoalUseCases
@using Microsoft.AspNetCore.Authorization

@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IGetBodyMeasurementUseCase GetBodyMeasurementUseCase
@inject IGetBodyMeasurementGoalUseCase GetBodyMeasurementGoalUseCase

@* @attribute [Authorize] *@

@if(isProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <h2 color="black">Loading...</h2>
    </div>
}
else
{
    <PageTitle>Body Measurements</PageTitle>

    <h3 class="text-xl font-semibold mb-4">Measurements</h3>

    <div class="mb-4">
        <label>Measurement Type:</label>
        <select @bind="selectedType" class="form-select">
            @foreach (var type in Enum.GetValues<BodyMeasurementType>())
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
    
    <div class="mb-4">
        <label>Measurement Type:</label>
        <select @bind="selectedRange" class="form-select">
            @foreach (var option in preselectedDateRanges)
            {
                <option value="@option.Key">@option.Key</option>
            }
        </select>
    </div>
    
    @if (selectedRange == "Własna Data")
    {
        <div class="mb-4">
            <label>Data od:</label>
            <input type="date" class="form-control" @bind="customStartDate" />
            
        @if (customStartDate != default)
        {
            <label class="mt-2">Data do:</label>
            <input type="date" class="form-control" @bind="customEndDate" min="@customStartDate.ToString("yyyy-MM-dd")" />
        }
        </div>
    }
    
    <button class="btn btn-primary mb-4" @onclick="LoadBodyMeasurements">Pokaż Dane</button>
    
    @* <h3 class="text-xl font-semibold mb-4">Add Measurements</h3>
    
    <button class="btn btn-primary mb-4" @onclick="AddMeasurement">Dodaj dane</button>*@
    
    @if (BodyMeasurements != null && BodyMeasurements.Any())
    {
        <table class="min-w-full bg-white shadow-md rounded-lg overflow-hidden">
            <thead class="bg-gray-100 text-gray-700">
            <tr>
                <th class="px-6 py-3 text-left">Typ</th>
                <th class="px-6 py-3 text-left">Wartość</th>
                <th class="px-6 py-3 text-left">Data</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var m in BodyMeasurements.OrderByDescending(m => m.MeasurementDate))
            {
                <tr class="border-b">
                    <td class="px-6 py-4">@m.Type</td>
                    <td class="px-6 py-4">@m.Value</td>
                    <td class="px-6 py-4">@m.MeasurementDate.ToString("yyyy-MM-dd")</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-gray-600">Brak danych pomiarowych dla wybranego zakresu.</p>
    }

    @if (BodyMeasurementGoals != null && BodyMeasurementGoals.Any())
    {
        <h4 class="text-lg font-semibold mt-6 mb-2">Cele</h4>
        <table class="min-w-full bg-white shadow-md rounded-lg overflow-hidden">
            <thead class="bg-gray-100 text-gray-700">
            <tr>
                <th class="px-6 py-3 text-left">Typ</th>
                <th class="px-6 py-3 text-left">Cel</th>
                <th class="px-6 py-3 text-left">Od</th>
                <th class="px-6 py-3 text-left">Do</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var g in BodyMeasurementGoals.OrderByDescending(g => g.EffectiveFrom))
            {
                <tr class="border-b">
                    <td class="px-6 py-4">@g.Type</td>
                    <td class="px-6 py-4">@g.TargetValue</td>
                    <td class="px-6 py-4">@g.EffectiveFrom.ToString("yyyy-MM-dd")</td>
                    <td class="px-6 py-4">@g.EffectiveTo?.ToString("yyyy-MM-dd") ?? "-"</td>
                </tr>
            }
            </tbody>
        </table>
    }

}

@code{
    private bool isProcessing { get; set; } = true;
    private Guid parsedUserId { get; set; }
    
    private BodyMeasurementType selectedType { get; set; } = BodyMeasurementType.MasaCiala;
    private string selectedRange = "1 miesiąc";
    
    private DateTime customStartDate = DateTime.UtcNow;
    private DateTime customEndDate = DateTime.UtcNow;
    
    private Dictionary<string, Func<(DateTime From, DateTime To)>> preselectedDateRanges;
    private List<BodyMeasurementModel> BodyMeasurements;
    private List<BodyMeasurementGoalModel> BodyMeasurementGoals;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userIdString = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (Guid.TryParse(userIdString, out var guid))
        {
            parsedUserId = guid;
        }
        
        preselectedDateRanges = new Dictionary<string, Func<(DateTime From, DateTime To)>>()
        {
            { "1 miesiąc", () => (DateTime.UtcNow.AddMonths(-1), DateTime.UtcNow) },
            { "3 miesiące", () => (DateTime.UtcNow.AddMonths(-3), DateTime.UtcNow) },
            { "6 miesięcy", () => (DateTime.UtcNow.AddMonths(-6), DateTime.UtcNow) },
            { "12 miesięcy", () => (DateTime.UtcNow.AddMonths(-12), DateTime.UtcNow) },
            { "Od początku", () => (DateTime.MinValue, DateTime.UtcNow) },
            { "Własna Data", () => (customStartDate, customEndDate)}
            // zmienic minvalue na date zalozenia konta
        };
        isProcessing = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadBodyMeasurements();
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadBodyMeasurements()
    {
        // mozna zrobic zeby ladowalo jako onclick, a nie od razu przykladowe dane
        isProcessing = true;

        var (from, to) = selectedRange == "customDate"
            ? (customStartDate, customEndDate)
            : preselectedDateRanges[selectedRange]();

        BodyMeasurements = await GetBodyMeasurementUseCase.ExecuteAsync(parsedUserId, selectedType, from, to);
        BodyMeasurementGoals = await GetBodyMeasurementGoalUseCase.ExecuteAsync(parsedUserId, selectedType, from, to);

        isProcessing = false;
    }

    
    @*private async Task AddMeasurement()
    {
        if (1 > 0)
        {
            try
            {
                Console.WriteLine($"Adding body measurement: {}, {}, {}, {}");
                await AddBodyMeasurementUseCase.ExecuteAsync(BodyMeasurementModel bodyMeasurement);
                Console.WriteLine("Body measurement added successfully, reloading...");
                await LoadBodyMeasurements();
                
                await InvokeAsync(StateHasChanged);
                Console.WriteLine("UI updated");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding body measurement: {ex.Message}");
            }
        }
    }*@
}
