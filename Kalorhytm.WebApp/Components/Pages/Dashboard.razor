@page "/dashboard"
@rendermode InteractiveServer
@using Kalorhytm.Contracts
@using Kalorhytm.Contracts.Models
@using Kalorhytm.Domain.Enums
@using Kalorhytm.Logic.Interfaces
@using Kalorhytm.Logic.UseCases
@inject IGetDailyNutritionUseCase GetDailyNutritionUseCase
@inject ISearchFoodsUseCase SearchFoodsUseCase
@inject IAddMealEntryUseCase AddMealEntryUseCase

<PageTitle>Dashboard - Kalkulator Kalorii</PageTitle>

<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-8">Dashboard - Kalkulator Kalorii</h1>
    
    <!-- Date Selector -->
    <div class="mb-6">
        <label for="selectedDate" class="block text-sm font-medium text-gray-700 mb-2">Data:</label>
        <input type="date" id="selectedDate" @bind="selectedDate" @bind:format="yyyy-MM-dd" 
               class="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
        <button @onclick="LoadDailyNutrition" class="ml-2 bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">
            Za≈Çaduj
        </button>
    </div>

    <!-- Daily Nutrition Summary -->
    @if (dailyNutrition != null)
    {
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">Dzienne podsumowanie</h2>
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">Kalorie</h3>
                    <p class="text-3xl font-bold text-blue-600">@dailyNutrition.TotalCalories.ToString("F0")</p>
                    <p class="text-sm text-gray-500">kcal</p>
                </div>
                
                <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">Bia≈Çko</h3>
                    <p class="text-3xl font-bold text-green-600">@dailyNutrition.TotalProtein.ToString("F1")</p>
                    <p class="text-sm text-gray-500">g</p>
                </div>
                
                <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">Wƒôglowodany</h3>
                    <p class="text-3xl font-bold text-yellow-600">@dailyNutrition.TotalCarbohydrates.ToString("F1")</p>
                    <p class="text-sm text-gray-500">g</p>
                </div>
                
                <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">T≈Çuszcze</h3>
                    <p class="text-3xl font-bold text-red-600">@dailyNutrition.TotalFat.ToString("F1")</p>
                    <p class="text-sm text-gray-500">g</p>
                </div>
            </div>
        </div>
    }

    <!-- Meal Entries - Always Visible -->
    <div class="space-y-6">
        <h2 class="text-xl font-semibold text-gray-900 mb-4">Dzisiejsze posi≈Çki</h2>
        
        <!-- Breakfast -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900">üç≥ ≈öniadanie</h3>
                <button @onclick="() => ShowAddFoodModal(MealType.Breakfast)" 
                        class="bg-green-500 text-white p-2 rounded-full hover:bg-green-600 transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                </button>
            </div>
            @{
                var breakfastEntries = dailyNutrition?.MealEntries?.Where(me => me.MealType == MealType.Breakfast).ToList() ?? new List<MealEntryModel>();
            }
            @if (breakfastEntries.Any())
            {
                @foreach (var entry in breakfastEntries)
                {
                    <div class="flex justify-between items-center p-3 bg-gray-50 rounded-md mb-2">
                        <div>
                            <h4 class="font-medium text-gray-900">@entry.Food.Name</h4>
                            <p class="text-sm text-gray-500">@entry.Quantity g</p>
                        </div>
                        <div class="text-right text-sm text-gray-600">
                            <div>@entry.TotalCalories.ToString("F0") kcal</div>
                            <div>B: @entry.TotalProtein.ToString("F1")g W: @entry.TotalCarbohydrates.ToString("F1")g T: @entry.TotalFat.ToString("F1")g</div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-4 text-gray-500">
                    <p>Brak posi≈Çk√≥w</p>
                </div>
            }
        </div>

        <!-- Second Breakfast -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900">ü•ê Drugie ≈õniadanie</h3>
                <button @onclick="() => ShowAddFoodModal(MealType.SecondBreakfast)" 
                        class="bg-green-500 text-white p-2 rounded-full hover:bg-green-600 transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                </button>
            </div>
            @{
                var secondBreakfastEntries = dailyNutrition?.MealEntries?.Where(me => me.MealType == MealType.SecondBreakfast).ToList() ?? new List<MealEntryModel>();
            }
            @if (secondBreakfastEntries.Any())
            {
                @foreach (var entry in secondBreakfastEntries)
                {
                    <div class="flex justify-between items-center p-3 bg-gray-50 rounded-md mb-2">
                        <div>
                            <h4 class="font-medium text-gray-900">@entry.Food.Name</h4>
                            <p class="text-sm text-gray-500">@entry.Quantity g</p>
                        </div>
                        <div class="text-right text-sm text-gray-600">
                            <div>@entry.TotalCalories.ToString("F0") kcal</div>
                            <div>B: @entry.TotalProtein.ToString("F1")g W: @entry.TotalCarbohydrates.ToString("F1")g T: @entry.TotalFat.ToString("F1")g</div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-4 text-gray-500">
                    <p>Brak posi≈Çk√≥w</p>
                </div>
            }
        </div>

        <!-- Lunch -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900">üçΩÔ∏è Obiad</h3>
                <button @onclick="() => ShowAddFoodModal(MealType.Lunch)" 
                        class="bg-green-500 text-white p-2 rounded-full hover:bg-green-600 transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                </button>
            </div>
            @{
                var lunchEntries = dailyNutrition?.MealEntries?.Where(me => me.MealType == MealType.Lunch).ToList() ?? new List<MealEntryModel>();
            }
            @if (lunchEntries.Any())
            {
                @foreach (var entry in lunchEntries)
                {
                    <div class="flex justify-between items-center p-3 bg-gray-50 rounded-md mb-2">
                        <div>
                            <h4 class="font-medium text-gray-900">@entry.Food.Name</h4>
                            <p class="text-sm text-gray-500">@entry.Quantity g</p>
                        </div>
                        <div class="text-right text-sm text-gray-600">
                            <div>@entry.TotalCalories.ToString("F0") kcal</div>
                            <div>B: @entry.TotalProtein.ToString("F1")g W: @entry.TotalCarbohydrates.ToString("F1")g T: @entry.TotalFat.ToString("F1")g</div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-4 text-gray-500">
                    <p>Brak posi≈Çk√≥w</p>
                </div>
            }
        </div>

        <!-- Snack -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900">üçé PrzekƒÖska</h3>
                <button @onclick="() => ShowAddFoodModal(MealType.Snack)" 
                        class="bg-green-500 text-white p-2 rounded-full hover:bg-green-600 transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                </button>
            </div>
            @{
                var snackEntries = dailyNutrition?.MealEntries?.Where(me => me.MealType == MealType.Snack).ToList() ?? new List<MealEntryModel>();
            }
            @if (snackEntries.Any())
            {
                @foreach (var entry in snackEntries)
                {
                    <div class="flex justify-between items-center p-3 bg-gray-50 rounded-md mb-2">
                        <div>
                            <h4 class="font-medium text-gray-900">@entry.Food.Name</h4>
                            <p class="text-sm text-gray-500">@entry.Quantity g</p>
                        </div>
                        <div class="text-right text-sm text-gray-600">
                            <div>@entry.TotalCalories.ToString("F0") kcal</div>
                            <div>B: @entry.TotalProtein.ToString("F1")g W: @entry.TotalCarbohydrates.ToString("F1")g T: @entry.TotalFat.ToString("F1")g</div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-4 text-gray-500">
                    <p>Brak posi≈Çk√≥w</p>
                </div>
            }
        </div>

        <!-- Dinner -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900">üåô Kolacja</h3>
                <button @onclick="() => ShowAddFoodModal(MealType.Dinner)" 
                        class="bg-green-500 text-white p-2 rounded-full hover:bg-green-600 transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                </button>
            </div>
            @{
                var dinnerEntries = dailyNutrition?.MealEntries?.Where(me => me.MealType == MealType.Dinner).ToList() ?? new List<MealEntryModel>();
            }
            @if (dinnerEntries.Any())
            {
                @foreach (var entry in dinnerEntries)
                {
                    <div class="flex justify-between items-center p-3 bg-gray-50 rounded-md mb-2">
                        <div>
                            <h4 class="font-medium text-gray-900">@entry.Food.Name</h4>
                            <p class="text-sm text-gray-500">@entry.Quantity g</p>
                        </div>
                        <div class="text-right text-sm text-gray-600">
                            <div>@entry.TotalCalories.ToString("F0") kcal</div>
                            <div>B: @entry.TotalProtein.ToString("F1")g W: @entry.TotalCarbohydrates.ToString("F1")g T: @entry.TotalFat.ToString("F1")g</div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-4 text-gray-500">
                    <p>Brak posi≈Çk√≥w</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal for adding food -->
@if (showModal)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 9999;">
        <div class="bg-white rounded-lg p-6 w-96 mx-4 shadow-xl">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Dodaj do @GetMealTypeName(selectedMealType)</h3>
                <button @onclick="CloseModal" class="text-gray-400 hover:text-gray-600 bg-transparent border-none cursor-pointer">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Wyszukaj produkt:</label>
                <input type="text" @bind="SearchTermModal" placeholder="Wpisz nazwƒô produktu..." 
                       class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            @if (modalSearchResults.Any())
            {
                <div class="max-h-60 overflow-y-auto border border-gray-200 rounded-md mb-4">
                    @foreach (var food in modalSearchResults)
                    {
                        <div class="px-3 py-2 border-b border-gray-100 cursor-pointer hover:bg-gray-50" @onclick="() => SelectFoodForModal(food)">
                            <div class="flex justify-between items-center">
                                <div>
                                    <h4 class="font-medium text-gray-900">@food.Name</h4>
                                    <p class="text-xs text-gray-400">@food.Calories kcal / @food.Unit</p>
                                </div>
                                <div class="text-right text-xs text-gray-500">
                                    <div>B: @food.Protein g</div>
                                    <div>W: @food.Carbohydrates g</div>
                                    <div>T: @food.Fat g</div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            @if (selectedFoodForModal != null)
            {
                <div class="mb-4 p-4 bg-blue-50 rounded-md">
                    <h4 class="font-medium text-gray-900 mb-2">Wybrany produkt: @selectedFoodForModal.Name</h4>
                    <p class="text-xs text-gray-500">
                        Kalorie: @selectedFoodForModal.Calories kcal | Bia≈Çko: @selectedFoodForModal.Protein g | 
                        Wƒôglowodany: @selectedFoodForModal.Carbohydrates g | T≈Çuszcze: @selectedFoodForModal.Fat g
                    </p>
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Ilo≈õƒá (g):</label>
                    <input type="number" @bind="modalQuantity" min="1" step="1" 
                           class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm" />
                </div>
                <div class="flex gap-2">
                    <button @onclick="AddFoodToMeal" class="flex-1 bg-green-500 text-white px-4 py-2 rounded-md border-none cursor-pointer hover:bg-green-600 transition">Dodaj do posi≈Çku</button>
                    <button @onclick="CloseModal" class="flex-1 bg-gray-300 text-gray-700 px-4 py-2 rounded-md border-none cursor-pointer hover:bg-gray-400 transition">Anuluj</button>
                </div>
            }
        </div>
    </div>
}

@code {
    private DateTime selectedDate = DateTime.Today;
    private DailyNutritionModel? dailyNutrition;
    private string _searchTerm = "";
    private List<FoodModel> searchResults = new();
    
    // Modal state
    private bool showModal = false;
    private MealType selectedMealType = MealType.Breakfast;
    private string searchTerm = "";
    private List<FoodModel> modalSearchResults = new();
    private FoodModel? selectedFoodForModal;
    private double modalQuantity = 100;

    private string SearchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                _ = Task.Run(async () => await SearchFoods());
            }
        }
    }

    private string SearchTermModal
    {
        get => searchTerm;
        set
        {
            if (searchTerm != value)
            {
                searchTerm = value;
                _ = Task.Run(async () => await SearchFoodsForModal());
            }
        }
    }

    private FoodModel? selectedFood;
    private MealType selectedMealTypeOld = MealType.Breakfast;
    private double quantity = 100;

    protected override async Task OnInitializedAsync()
    {
        searchResults = new List<FoodModel>();
        dailyNutrition = new DailyNutritionModel { Date = selectedDate };
        await LoadDailyNutrition();
    }

    private async Task LoadDailyNutrition()
    {
        try
        {
            Console.WriteLine($"Loading daily nutrition for date: {selectedDate:yyyy-MM-dd}");
            dailyNutrition = await GetDailyNutritionUseCase.ExecuteAsync(selectedDate);
            Console.WriteLine($"Loaded nutrition: {dailyNutrition?.MealEntries.Count ?? 0} entries, Total calories: {dailyNutrition?.TotalCalories ?? 0}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading daily nutrition: {ex.Message}");
        }
    }

    private async Task SearchFoods()
    {
        try
        {
            searchResults = await SearchFoodsUseCase.ExecuteAsync(_searchTerm);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching foods: {ex.Message}");
            searchResults.Clear();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void SelectFood(FoodModel foodModel)
    {
        selectedFood = foodModel;
        InvokeAsync(StateHasChanged);
    }

    private async Task AddMealEntry()
    {
        if (selectedFood != null && quantity > 0)
        {
            try
            {
                Console.WriteLine($"Adding meal entry: {selectedFood.Name}, {quantity}g, {selectedMealTypeOld}, {selectedDate:yyyy-MM-dd}");
                await AddMealEntryUseCase.ExecuteAsync(selectedFood, quantity, selectedMealTypeOld, selectedDate);
                Console.WriteLine("Meal entry added successfully, reloading nutrition...");
                await LoadDailyNutrition();
                
                selectedFood = null;
                quantity = 100;
                _searchTerm = "";
                searchResults.Clear();
                
                await InvokeAsync(StateHasChanged);
                Console.WriteLine("UI updated");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding meal entry: {ex.Message}");
            }
        }
    }

    private void ShowAddFoodModal(MealType mealType)
    {
        Console.WriteLine($"Opening modal for meal type: {mealType}");
        selectedMealType = mealType;
        showModal = true;
        searchTerm = "";
        modalSearchResults.Clear();
        selectedFoodForModal = null;
        modalQuantity = 100;
        Console.WriteLine($"Modal state: showModal = {showModal}");
        InvokeAsync(StateHasChanged);
    }

    private void CloseModal()
    {
        showModal = false;
        InvokeAsync(StateHasChanged);
    }

    private async Task SearchFoodsForModal()
    {
        try
        {
            modalSearchResults = await SearchFoodsUseCase.ExecuteAsync(searchTerm);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching foods for modal: {ex.Message}");
            modalSearchResults.Clear();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void SelectFoodForModal(FoodModel food)
    {
        selectedFoodForModal = food;
        InvokeAsync(StateHasChanged);
    }

    private async Task AddFoodToMeal()
    {
        if (selectedFoodForModal != null && modalQuantity > 0)
        {
            try
            {
                Console.WriteLine($"Adding food to meal: {selectedFoodForModal.Name}, {modalQuantity}g, {selectedMealType}, {selectedDate:yyyy-MM-dd}");
                await AddMealEntryUseCase.ExecuteAsync(selectedFoodForModal, modalQuantity, selectedMealType, selectedDate);
                Console.WriteLine("Food added successfully, reloading nutrition...");
                await LoadDailyNutrition();
                
                CloseModal();
                Console.WriteLine("Modal closed, UI updated");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding food to meal: {ex.Message}");
            }
        }
    }

    private string GetMealTypeName(MealType mealType)
    {
        return mealType switch
        {
            MealType.Breakfast => "≈öniadanie",
            MealType.SecondBreakfast => "Drugie ≈õniadanie",
            MealType.Lunch => "Obiad",
            MealType.Snack => "PrzekƒÖska",
            MealType.Dinner => "Kolacja",
            _ => mealType.ToString()
        };
    }
} 