@page "/dashboard"
@rendermode InteractiveServer
@using Kalorhytm.Contracts
@using Kalorhytm.Logic.Services
@inject IGetDailyNutritionService GetDailyNutritionUseCase
@inject ISearchFoodsService SearchFoodsUseCase
@inject IAddMealService AddMealEntryUseCase

<PageTitle>Dashboard - Kalkulator Kalorii</PageTitle>

<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-8">Dashboard - Kalkulator Kalorii</h1>
    
    <!-- Date Selector -->
    <div class="mb-6">
        <label for="selectedDate" class="block text-sm font-medium text-gray-700 mb-2">Data:</label>
        <input type="date" id="selectedDate" @bind="selectedDate" @bind:format="yyyy-MM-dd" 
               class="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
        <button @onclick="LoadDailyNutrition" class="ml-2 bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">
            Załaduj
        </button>
    </div>

    <!-- Daily Nutrition Summary -->
    <!-- Debug: dailyNutrition is @(dailyNutrition == null ? "null" : "not null") -->
    @if (dailyNutrition != null)
    {
        <!-- Debug: @dailyNutrition.MealEntries.Count entries, Total: @dailyNutrition.TotalCalories kcal -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">Dzienne podsumowanie</h2>
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900 mb-2">Kalorie</h3>
                <p class="text-3xl font-bold text-blue-600">@dailyNutrition.TotalCalories.ToString("F0")</p>
                <p class="text-sm text-gray-500">kcal</p>
            </div>
            
            <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900 mb-2">Białko</h3>
                <p class="text-3xl font-bold text-green-600">@dailyNutrition.TotalProtein.ToString("F1")</p>
                <p class="text-sm text-gray-500">g</p>
            </div>
            
            <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900 mb-2">Węglowodany</h3>
                <p class="text-3xl font-bold text-yellow-600">@dailyNutrition.TotalCarbohydrates.ToString("F1")</p>
                <p class="text-sm text-gray-500">g</p>
            </div>
            
            <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900 mb-2">Tłuszcze</h3>
                <p class="text-3xl font-bold text-red-600">@dailyNutrition.TotalFat.ToString("F1")</p>
                <p class="text-sm text-gray-500">g</p>
            </div>
        </div>
    </div>
    }

    <!-- Add Meal Section -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <h2 class="text-xl font-semibold text-gray-900 mb-4">Dodaj posiłek</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
                <label for="mealType" class="block text-sm font-medium text-gray-700 mb-2">Typ posiłku:</label>
                <select id="mealType" @bind="selectedMealType" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="@MealType.Breakfast">Śniadanie</option>
                    <option value="@MealType.SecondBreakfast">Drugie śniadanie</option>
                    <option value="@MealType.Lunch">Obiad</option>
                    <option value="@MealType.Snack">Przekąska</option>
                    <option value="@MealType.Dinner">Kolacja</option>
                </select>
            </div>
            
            <div>
                <label for="quantity" class="block text-sm font-medium text-gray-700 mb-2">Ilość (g):</label>
                <input type="number" id="quantity" @bind="quantity" min="1" step="1" 
                       class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
        </div>
        
        <div class="mb-4">
            <label for="searchFood" class="block text-sm font-medium text-gray-700 mb-2">Wyszukaj produkt:</label>
            <input type="text" id="searchFood" @bind="SearchTerm" @bind:event="oninput"
                   placeholder="Wpisz nazwę produktu..." 
                   class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
        </div>
        
        @if (searchResults != null && searchResults.Any())
        {
            <div class="max-h-60 overflow-y-auto border border-gray-200 rounded-md">
                @foreach (var food in searchResults)
                {
                    <div class="p-3 border-b border-gray-100 hover:bg-gray-50 cursor-pointer" @onclick="() => SelectFood(food)">
                        <div class="flex justify-between items-center">
                            <div>
                                <h4 class="font-medium text-gray-900">@food.Name</h4>
                                <p class="text-sm text-gray-500">@food.Calories kcal / @food.Unit</p>
                            </div>
                            <div class="text-right text-sm text-gray-600">
                                <div>B: @food.Protein g</div>
                                <div>W: @food.Carbohydrates g</div>
                                <div>T: @food.Fat g</div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        
        @if (selectedFood != null)
        {
            <div class="mt-4 p-4 bg-blue-50 rounded-md">
                <h4 class="font-medium text-gray-900 mb-2">Wybrany produkt: @selectedFood.Name</h4>
                <p class="text-sm text-gray-600">
                    Kalorie: @selectedFood.Calories kcal | Białko: @selectedFood.Protein g | 
                    Węglowodany: @selectedFood.Carbohydrates g | Tłuszcze: @selectedFood.Fat g
                </p>
                <button @onclick="AddMealEntry" class="mt-2 bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600">
                    Dodaj do posiłku
                </button>
            </div>
        }
    </div>

    <!-- Meal Entries List -->
    @if (dailyNutrition?.MealEntries != null && dailyNutrition.MealEntries.Any())
    {
        <div class="bg-white rounded-lg shadow-md p-6">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">Dzisiejsze posiłki</h2>
            
            @foreach (var mealType in Enum.GetValues<MealType>())
            {
                var mealEntries = dailyNutrition.MealEntries.Where(me => me.MealType == mealType).ToList();
                @if (mealEntries.Any())
                {
                    <div class="mb-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-2">@GetMealTypeName(mealType)</h3>
                        @foreach (var entry in mealEntries)
                        {
                            <div class="flex justify-between items-center p-3 bg-gray-50 rounded-md mb-2">
                                <div>
                                    <h4 class="font-medium text-gray-900">@entry.Food.Name</h4>
                                    <p class="text-sm text-gray-500">@entry.Quantity g</p>
                                </div>
                                <div class="text-right text-sm text-gray-600">
                                    <div>@entry.TotalCalories.ToString("F0") kcal</div>
                                    <div>B: @entry.TotalProtein.ToString("F1")g W: @entry.TotalCarbohydrates.ToString("F1")g T: @entry.TotalFat.ToString("F1")g</div>
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        </div>
    }
</div>

@code {
    private DateTime selectedDate = DateTime.Today;
    private DailyNutritionModel? dailyNutrition;
    private string _searchTerm = "";
    private List<FoodModel> searchResults = new();
    
    private string SearchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                _ = Task.Run(async () => await SearchFoods());
            }
        }
    }


    private FoodModel? selectedFood;
    private MealType selectedMealType = MealType.Breakfast;
    private double quantity = 100;

    protected override async Task OnInitializedAsync()
    {
        searchResults = new List<FoodModel>();
        dailyNutrition = new DailyNutritionModel { Date = selectedDate };
        await LoadDailyNutrition();
    }

    private async Task LoadDailyNutrition()
    {
        try
        {
            Console.WriteLine($"Loading daily nutrition for date: {selectedDate:yyyy-MM-dd}");
            dailyNutrition = await GetDailyNutritionUseCase.ExecuteAsync(selectedDate);
            Console.WriteLine($"Loaded nutrition: {dailyNutrition?.MealEntries.Count ?? 0} entries, Total calories: {dailyNutrition?.TotalCalories ?? 0}");
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading daily nutrition: {ex.Message}");
        }
    }



    private async Task SearchFoods()
    {
        try
        {
            // Zawsze wykonuj wyszukiwanie, nawet dla pustego terminu
            searchResults = await SearchFoodsUseCase.ExecuteAsync(_searchTerm);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching foods: {ex.Message}");
            searchResults.Clear();
            await InvokeAsync(StateHasChanged);
        }
    }



    private void SelectFood(FoodModel foodModel)
    {
        selectedFood = foodModel;
        InvokeAsync(StateHasChanged);
    }

    private async Task AddMealEntry()
    {
        if (selectedFood != null && quantity > 0)
        {
            try
            {
                Console.WriteLine($"Adding meal entry: {selectedFood.Name}, {quantity}g, {selectedMealType}, {selectedDate:yyyy-MM-dd}");
                await AddMealEntryUseCase.ExecuteAsync(selectedFood, quantity, selectedMealType, selectedDate);
                Console.WriteLine("Meal entry added successfully, reloading nutrition...");
                await LoadDailyNutrition();
                
                // Reset form
                selectedFood = null;
                quantity = 100;
                _searchTerm = "";
                searchResults.Clear();
                
                // Force UI update
                await InvokeAsync(StateHasChanged);
                Console.WriteLine("UI updated");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding meal entry: {ex.Message}");
            }
        }
    }

    private string GetMealTypeName(MealType mealType)
    {
        return mealType switch
        {
            MealType.Breakfast => "Śniadanie",
            MealType.SecondBreakfast => "Drugie śniadanie",
            MealType.Lunch => "Obiad",
            MealType.Snack => "Przekąska",
            MealType.Dinner => "Kolacja",
            _ => mealType.ToString()
        };
    }

} 